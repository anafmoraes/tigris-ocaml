State 0:
program' -> . program [ # ]
-- On WHILE shift to state 1
-- On STRING shift to state 2
-- On REAL shift to state 3
-- On LPAREN shift to state 4
-- On LOGIC shift to state 5
-- On LET shift to state 6
-- On INTEGER shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On BREAK shift to state 16
-- On var shift to state 17
-- On program shift to state 108
-- On exp shift to state 109

State 1:
exp -> WHILE . exp DO exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On WHILE shift to state 1
-- On STRING shift to state 2
-- On REAL shift to state 3
-- On LPAREN shift to state 4
-- On LOGIC shift to state 5
-- On LET shift to state 6
-- On INTEGER shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On BREAK shift to state 16
-- On var shift to state 17
-- On exp shift to state 105

State 2:
exp -> STRING . [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On VAR reduce production exp -> STRING 
-- On TYPE reduce production exp -> STRING 
-- On TIMES reduce production exp -> STRING 
-- On THEN reduce production exp -> STRING 
-- On SEMI reduce production exp -> STRING 
-- On RPAREN reduce production exp -> STRING 
-- On POW reduce production exp -> STRING 
-- On PLUS reduce production exp -> STRING 
-- On OR reduce production exp -> STRING 
-- On NE reduce production exp -> STRING 
-- On MOD reduce production exp -> STRING 
-- On MINUS reduce production exp -> STRING 
-- On LT reduce production exp -> STRING 
-- On LE reduce production exp -> STRING 
-- On IN reduce production exp -> STRING 
-- On GT reduce production exp -> STRING 
-- On GE reduce production exp -> STRING 
-- On FUNCTION reduce production exp -> STRING 
-- On EQ reduce production exp -> STRING 
-- On EOF reduce production exp -> STRING 
-- On END reduce production exp -> STRING 
-- On ELSE reduce production exp -> STRING 
-- On DO reduce production exp -> STRING 
-- On DIV reduce production exp -> STRING 
-- On COMMA reduce production exp -> STRING 
-- On AND reduce production exp -> STRING 

State 3:
exp -> REAL . [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On VAR reduce production exp -> REAL 
-- On TYPE reduce production exp -> REAL 
-- On TIMES reduce production exp -> REAL 
-- On THEN reduce production exp -> REAL 
-- On SEMI reduce production exp -> REAL 
-- On RPAREN reduce production exp -> REAL 
-- On POW reduce production exp -> REAL 
-- On PLUS reduce production exp -> REAL 
-- On OR reduce production exp -> REAL 
-- On NE reduce production exp -> REAL 
-- On MOD reduce production exp -> REAL 
-- On MINUS reduce production exp -> REAL 
-- On LT reduce production exp -> REAL 
-- On LE reduce production exp -> REAL 
-- On IN reduce production exp -> REAL 
-- On GT reduce production exp -> REAL 
-- On GE reduce production exp -> REAL 
-- On FUNCTION reduce production exp -> REAL 
-- On EQ reduce production exp -> REAL 
-- On EOF reduce production exp -> REAL 
-- On END reduce production exp -> REAL 
-- On ELSE reduce production exp -> REAL 
-- On DO reduce production exp -> REAL 
-- On DIV reduce production exp -> REAL 
-- On COMMA reduce production exp -> REAL 
-- On AND reduce production exp -> REAL 

State 4:
exp -> LPAREN . loption(separated_nonempty_list(SEMI,exp)) RPAREN [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On WHILE shift to state 1
-- On STRING shift to state 2
-- On REAL shift to state 3
-- On LPAREN shift to state 4
-- On LOGIC shift to state 5
-- On LET shift to state 6
-- On INTEGER shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On BREAK shift to state 16
-- On var shift to state 17
-- On separated_nonempty_list(SEMI,exp) shift to state 99
-- On loption(separated_nonempty_list(SEMI,exp)) shift to state 100
-- On exp shift to state 102
-- On RPAREN reduce production loption(separated_nonempty_list(SEMI,exp)) -> 

State 5:
exp -> LOGIC . [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On VAR reduce production exp -> LOGIC 
-- On TYPE reduce production exp -> LOGIC 
-- On TIMES reduce production exp -> LOGIC 
-- On THEN reduce production exp -> LOGIC 
-- On SEMI reduce production exp -> LOGIC 
-- On RPAREN reduce production exp -> LOGIC 
-- On POW reduce production exp -> LOGIC 
-- On PLUS reduce production exp -> LOGIC 
-- On OR reduce production exp -> LOGIC 
-- On NE reduce production exp -> LOGIC 
-- On MOD reduce production exp -> LOGIC 
-- On MINUS reduce production exp -> LOGIC 
-- On LT reduce production exp -> LOGIC 
-- On LE reduce production exp -> LOGIC 
-- On IN reduce production exp -> LOGIC 
-- On GT reduce production exp -> LOGIC 
-- On GE reduce production exp -> LOGIC 
-- On FUNCTION reduce production exp -> LOGIC 
-- On EQ reduce production exp -> LOGIC 
-- On EOF reduce production exp -> LOGIC 
-- On END reduce production exp -> LOGIC 
-- On ELSE reduce production exp -> LOGIC 
-- On DO reduce production exp -> LOGIC 
-- On DIV reduce production exp -> LOGIC 
-- On COMMA reduce production exp -> LOGIC 
-- On AND reduce production exp -> LOGIC 

State 6:
exp -> LET . decs IN exp END [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On VAR shift to state 7
-- On TYPE shift to state 62
-- On FUNCTION shift to state 67
-- On vardec shift to state 85
-- On typedec shift to state 86
-- On nonempty_list(typedec) shift to state 88
-- On nonempty_list(funcdec) shift to state 89
-- On list(dec) shift to state 90
-- On funcdec shift to state 91
-- On decs shift to state 93
-- On dec shift to state 97
-- On IN reduce production list(dec) -> 

State 7:
vardec -> VAR . ID COLON ID ASSIGN exp [ VAR TYPE IN FUNCTION ]
vardec -> VAR . ID ASSIGN exp [ VAR TYPE IN FUNCTION ]
-- On ID shift to state 8

State 8:
vardec -> VAR ID . COLON ID ASSIGN exp [ VAR TYPE IN FUNCTION ]
vardec -> VAR ID . ASSIGN exp [ VAR TYPE IN FUNCTION ]
-- On COLON shift to state 9
-- On ASSIGN shift to state 60

State 9:
vardec -> VAR ID COLON . ID ASSIGN exp [ VAR TYPE IN FUNCTION ]
-- On ID shift to state 10

State 10:
vardec -> VAR ID COLON ID . ASSIGN exp [ VAR TYPE IN FUNCTION ]
-- On ASSIGN shift to state 11

State 11:
vardec -> VAR ID COLON ID ASSIGN . exp [ VAR TYPE IN FUNCTION ]
-- On WHILE shift to state 1
-- On STRING shift to state 2
-- On REAL shift to state 3
-- On LPAREN shift to state 4
-- On LOGIC shift to state 5
-- On LET shift to state 6
-- On INTEGER shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On BREAK shift to state 16
-- On var shift to state 17
-- On exp shift to state 59

State 12:
exp -> INTEGER . [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On VAR reduce production exp -> INTEGER 
-- On TYPE reduce production exp -> INTEGER 
-- On TIMES reduce production exp -> INTEGER 
-- On THEN reduce production exp -> INTEGER 
-- On SEMI reduce production exp -> INTEGER 
-- On RPAREN reduce production exp -> INTEGER 
-- On POW reduce production exp -> INTEGER 
-- On PLUS reduce production exp -> INTEGER 
-- On OR reduce production exp -> INTEGER 
-- On NE reduce production exp -> INTEGER 
-- On MOD reduce production exp -> INTEGER 
-- On MINUS reduce production exp -> INTEGER 
-- On LT reduce production exp -> INTEGER 
-- On LE reduce production exp -> INTEGER 
-- On IN reduce production exp -> INTEGER 
-- On GT reduce production exp -> INTEGER 
-- On GE reduce production exp -> INTEGER 
-- On FUNCTION reduce production exp -> INTEGER 
-- On EQ reduce production exp -> INTEGER 
-- On EOF reduce production exp -> INTEGER 
-- On END reduce production exp -> INTEGER 
-- On ELSE reduce production exp -> INTEGER 
-- On DO reduce production exp -> INTEGER 
-- On DIV reduce production exp -> INTEGER 
-- On COMMA reduce production exp -> INTEGER 
-- On AND reduce production exp -> INTEGER 

State 13:
exp -> IF . exp THEN exp ELSE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> IF . exp THEN exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On WHILE shift to state 1
-- On STRING shift to state 2
-- On REAL shift to state 3
-- On LPAREN shift to state 4
-- On LOGIC shift to state 5
-- On LET shift to state 6
-- On INTEGER shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On BREAK shift to state 16
-- On var shift to state 17
-- On exp shift to state 54

State 14:
exp -> ID . LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
var -> ID . [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA ASSIGN AND ]
-- On LPAREN shift to state 15
-- On VAR reduce production var -> ID 
-- On TYPE reduce production var -> ID 
-- On TIMES reduce production var -> ID 
-- On THEN reduce production var -> ID 
-- On SEMI reduce production var -> ID 
-- On RPAREN reduce production var -> ID 
-- On POW reduce production var -> ID 
-- On PLUS reduce production var -> ID 
-- On OR reduce production var -> ID 
-- On NE reduce production var -> ID 
-- On MOD reduce production var -> ID 
-- On MINUS reduce production var -> ID 
-- On LT reduce production var -> ID 
-- On LE reduce production var -> ID 
-- On IN reduce production var -> ID 
-- On GT reduce production var -> ID 
-- On GE reduce production var -> ID 
-- On FUNCTION reduce production var -> ID 
-- On EQ reduce production var -> ID 
-- On EOF reduce production var -> ID 
-- On END reduce production var -> ID 
-- On ELSE reduce production var -> ID 
-- On DO reduce production var -> ID 
-- On DIV reduce production var -> ID 
-- On COMMA reduce production var -> ID 
-- On ASSIGN reduce production var -> ID 
-- On AND reduce production var -> ID 

State 15:
exp -> ID LPAREN . loption(separated_nonempty_list(COMMA,exp)) RPAREN [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On WHILE shift to state 1
-- On STRING shift to state 2
-- On REAL shift to state 3
-- On LPAREN shift to state 4
-- On LOGIC shift to state 5
-- On LET shift to state 6
-- On INTEGER shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On BREAK shift to state 16
-- On var shift to state 17
-- On separated_nonempty_list(COMMA,exp) shift to state 48
-- On loption(separated_nonempty_list(COMMA,exp)) shift to state 49
-- On exp shift to state 51
-- On RPAREN reduce production loption(separated_nonempty_list(COMMA,exp)) -> 

State 16:
exp -> BREAK . [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On VAR reduce production exp -> BREAK 
-- On TYPE reduce production exp -> BREAK 
-- On TIMES reduce production exp -> BREAK 
-- On THEN reduce production exp -> BREAK 
-- On SEMI reduce production exp -> BREAK 
-- On RPAREN reduce production exp -> BREAK 
-- On POW reduce production exp -> BREAK 
-- On PLUS reduce production exp -> BREAK 
-- On OR reduce production exp -> BREAK 
-- On NE reduce production exp -> BREAK 
-- On MOD reduce production exp -> BREAK 
-- On MINUS reduce production exp -> BREAK 
-- On LT reduce production exp -> BREAK 
-- On LE reduce production exp -> BREAK 
-- On IN reduce production exp -> BREAK 
-- On GT reduce production exp -> BREAK 
-- On GE reduce production exp -> BREAK 
-- On FUNCTION reduce production exp -> BREAK 
-- On EQ reduce production exp -> BREAK 
-- On EOF reduce production exp -> BREAK 
-- On END reduce production exp -> BREAK 
-- On ELSE reduce production exp -> BREAK 
-- On DO reduce production exp -> BREAK 
-- On DIV reduce production exp -> BREAK 
-- On COMMA reduce production exp -> BREAK 
-- On AND reduce production exp -> BREAK 

State 17:
exp -> var . [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> var . ASSIGN exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On ASSIGN shift to state 18
-- On VAR reduce production exp -> var 
-- On TYPE reduce production exp -> var 
-- On TIMES reduce production exp -> var 
-- On THEN reduce production exp -> var 
-- On SEMI reduce production exp -> var 
-- On RPAREN reduce production exp -> var 
-- On POW reduce production exp -> var 
-- On PLUS reduce production exp -> var 
-- On OR reduce production exp -> var 
-- On NE reduce production exp -> var 
-- On MOD reduce production exp -> var 
-- On MINUS reduce production exp -> var 
-- On LT reduce production exp -> var 
-- On LE reduce production exp -> var 
-- On IN reduce production exp -> var 
-- On GT reduce production exp -> var 
-- On GE reduce production exp -> var 
-- On FUNCTION reduce production exp -> var 
-- On EQ reduce production exp -> var 
-- On EOF reduce production exp -> var 
-- On END reduce production exp -> var 
-- On ELSE reduce production exp -> var 
-- On DO reduce production exp -> var 
-- On DIV reduce production exp -> var 
-- On COMMA reduce production exp -> var 
-- On AND reduce production exp -> var 

State 18:
exp -> var ASSIGN . exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On WHILE shift to state 1
-- On STRING shift to state 2
-- On REAL shift to state 3
-- On LPAREN shift to state 4
-- On LOGIC shift to state 5
-- On LET shift to state 6
-- On INTEGER shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On BREAK shift to state 16
-- On var shift to state 17
-- On exp shift to state 19

State 19:
exp -> exp . PLUS exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . MINUS exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . TIMES exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . DIV exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . MOD exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . POW exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . EQ exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . NE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . GT exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . GE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . LT exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . LE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . AND exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . OR exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> var ASSIGN exp . [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On TIMES shift to state 20
-- On POW shift to state 22
-- On PLUS shift to state 24
-- On OR shift to state 30
-- On NE shift to state 32
-- On MOD shift to state 26
-- On MINUS shift to state 34
-- On LT shift to state 36
-- On LE shift to state 38
-- On GT shift to state 40
-- On GE shift to state 42
-- On EQ shift to state 44
-- On DIV shift to state 28
-- On AND shift to state 46
-- On VAR reduce production exp -> var ASSIGN exp 
-- On TYPE reduce production exp -> var ASSIGN exp 
-- On THEN reduce production exp -> var ASSIGN exp 
-- On SEMI reduce production exp -> var ASSIGN exp 
-- On RPAREN reduce production exp -> var ASSIGN exp 
-- On IN reduce production exp -> var ASSIGN exp 
-- On FUNCTION reduce production exp -> var ASSIGN exp 
-- On EOF reduce production exp -> var ASSIGN exp 
-- On END reduce production exp -> var ASSIGN exp 
-- On ELSE reduce production exp -> var ASSIGN exp 
-- On DO reduce production exp -> var ASSIGN exp 
-- On COMMA reduce production exp -> var ASSIGN exp 

State 20:
exp -> exp TIMES . exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On WHILE shift to state 1
-- On STRING shift to state 2
-- On REAL shift to state 3
-- On LPAREN shift to state 4
-- On LOGIC shift to state 5
-- On LET shift to state 6
-- On INTEGER shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On BREAK shift to state 16
-- On var shift to state 17
-- On exp shift to state 21

State 21:
exp -> exp . PLUS exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . MINUS exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . TIMES exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp TIMES exp . [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . DIV exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . MOD exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . POW exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . EQ exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . NE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . GT exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . GE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . LT exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . LE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . AND exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . OR exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On POW shift to state 22
-- On VAR reduce production exp -> exp TIMES exp 
-- On TYPE reduce production exp -> exp TIMES exp 
-- On TIMES reduce production exp -> exp TIMES exp 
-- On THEN reduce production exp -> exp TIMES exp 
-- On SEMI reduce production exp -> exp TIMES exp 
-- On RPAREN reduce production exp -> exp TIMES exp 
-- On PLUS reduce production exp -> exp TIMES exp 
-- On OR reduce production exp -> exp TIMES exp 
-- On NE reduce production exp -> exp TIMES exp 
-- On MOD reduce production exp -> exp TIMES exp 
-- On MINUS reduce production exp -> exp TIMES exp 
-- On LT reduce production exp -> exp TIMES exp 
-- On LE reduce production exp -> exp TIMES exp 
-- On IN reduce production exp -> exp TIMES exp 
-- On GT reduce production exp -> exp TIMES exp 
-- On GE reduce production exp -> exp TIMES exp 
-- On FUNCTION reduce production exp -> exp TIMES exp 
-- On EQ reduce production exp -> exp TIMES exp 
-- On EOF reduce production exp -> exp TIMES exp 
-- On END reduce production exp -> exp TIMES exp 
-- On ELSE reduce production exp -> exp TIMES exp 
-- On DO reduce production exp -> exp TIMES exp 
-- On DIV reduce production exp -> exp TIMES exp 
-- On COMMA reduce production exp -> exp TIMES exp 
-- On AND reduce production exp -> exp TIMES exp 

State 22:
exp -> exp POW . exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On WHILE shift to state 1
-- On STRING shift to state 2
-- On REAL shift to state 3
-- On LPAREN shift to state 4
-- On LOGIC shift to state 5
-- On LET shift to state 6
-- On INTEGER shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On BREAK shift to state 16
-- On var shift to state 17
-- On exp shift to state 23

State 23:
exp -> exp . PLUS exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . MINUS exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . TIMES exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . DIV exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . MOD exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . POW exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp POW exp . [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . EQ exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . NE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . GT exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . GE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . LT exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . LE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . AND exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . OR exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On POW shift to state 22
-- On VAR reduce production exp -> exp POW exp 
-- On TYPE reduce production exp -> exp POW exp 
-- On TIMES reduce production exp -> exp POW exp 
-- On THEN reduce production exp -> exp POW exp 
-- On SEMI reduce production exp -> exp POW exp 
-- On RPAREN reduce production exp -> exp POW exp 
-- On PLUS reduce production exp -> exp POW exp 
-- On OR reduce production exp -> exp POW exp 
-- On NE reduce production exp -> exp POW exp 
-- On MOD reduce production exp -> exp POW exp 
-- On MINUS reduce production exp -> exp POW exp 
-- On LT reduce production exp -> exp POW exp 
-- On LE reduce production exp -> exp POW exp 
-- On IN reduce production exp -> exp POW exp 
-- On GT reduce production exp -> exp POW exp 
-- On GE reduce production exp -> exp POW exp 
-- On FUNCTION reduce production exp -> exp POW exp 
-- On EQ reduce production exp -> exp POW exp 
-- On EOF reduce production exp -> exp POW exp 
-- On END reduce production exp -> exp POW exp 
-- On ELSE reduce production exp -> exp POW exp 
-- On DO reduce production exp -> exp POW exp 
-- On DIV reduce production exp -> exp POW exp 
-- On COMMA reduce production exp -> exp POW exp 
-- On AND reduce production exp -> exp POW exp 

State 24:
exp -> exp PLUS . exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On WHILE shift to state 1
-- On STRING shift to state 2
-- On REAL shift to state 3
-- On LPAREN shift to state 4
-- On LOGIC shift to state 5
-- On LET shift to state 6
-- On INTEGER shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On BREAK shift to state 16
-- On var shift to state 17
-- On exp shift to state 25

State 25:
exp -> exp . PLUS exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp PLUS exp . [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . MINUS exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . TIMES exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . DIV exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . MOD exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . POW exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . EQ exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . NE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . GT exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . GE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . LT exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . LE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . AND exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . OR exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On TIMES shift to state 20
-- On POW shift to state 22
-- On MOD shift to state 26
-- On DIV shift to state 28
-- On VAR reduce production exp -> exp PLUS exp 
-- On TYPE reduce production exp -> exp PLUS exp 
-- On THEN reduce production exp -> exp PLUS exp 
-- On SEMI reduce production exp -> exp PLUS exp 
-- On RPAREN reduce production exp -> exp PLUS exp 
-- On PLUS reduce production exp -> exp PLUS exp 
-- On OR reduce production exp -> exp PLUS exp 
-- On NE reduce production exp -> exp PLUS exp 
-- On MINUS reduce production exp -> exp PLUS exp 
-- On LT reduce production exp -> exp PLUS exp 
-- On LE reduce production exp -> exp PLUS exp 
-- On IN reduce production exp -> exp PLUS exp 
-- On GT reduce production exp -> exp PLUS exp 
-- On GE reduce production exp -> exp PLUS exp 
-- On FUNCTION reduce production exp -> exp PLUS exp 
-- On EQ reduce production exp -> exp PLUS exp 
-- On EOF reduce production exp -> exp PLUS exp 
-- On END reduce production exp -> exp PLUS exp 
-- On ELSE reduce production exp -> exp PLUS exp 
-- On DO reduce production exp -> exp PLUS exp 
-- On COMMA reduce production exp -> exp PLUS exp 
-- On AND reduce production exp -> exp PLUS exp 

State 26:
exp -> exp MOD . exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On WHILE shift to state 1
-- On STRING shift to state 2
-- On REAL shift to state 3
-- On LPAREN shift to state 4
-- On LOGIC shift to state 5
-- On LET shift to state 6
-- On INTEGER shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On BREAK shift to state 16
-- On var shift to state 17
-- On exp shift to state 27

State 27:
exp -> exp . PLUS exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . MINUS exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . TIMES exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . DIV exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . MOD exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp MOD exp . [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . POW exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . EQ exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . NE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . GT exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . GE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . LT exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . LE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . AND exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . OR exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On POW shift to state 22
-- On VAR reduce production exp -> exp MOD exp 
-- On TYPE reduce production exp -> exp MOD exp 
-- On TIMES reduce production exp -> exp MOD exp 
-- On THEN reduce production exp -> exp MOD exp 
-- On SEMI reduce production exp -> exp MOD exp 
-- On RPAREN reduce production exp -> exp MOD exp 
-- On PLUS reduce production exp -> exp MOD exp 
-- On OR reduce production exp -> exp MOD exp 
-- On NE reduce production exp -> exp MOD exp 
-- On MOD reduce production exp -> exp MOD exp 
-- On MINUS reduce production exp -> exp MOD exp 
-- On LT reduce production exp -> exp MOD exp 
-- On LE reduce production exp -> exp MOD exp 
-- On IN reduce production exp -> exp MOD exp 
-- On GT reduce production exp -> exp MOD exp 
-- On GE reduce production exp -> exp MOD exp 
-- On FUNCTION reduce production exp -> exp MOD exp 
-- On EQ reduce production exp -> exp MOD exp 
-- On EOF reduce production exp -> exp MOD exp 
-- On END reduce production exp -> exp MOD exp 
-- On ELSE reduce production exp -> exp MOD exp 
-- On DO reduce production exp -> exp MOD exp 
-- On DIV reduce production exp -> exp MOD exp 
-- On COMMA reduce production exp -> exp MOD exp 
-- On AND reduce production exp -> exp MOD exp 

State 28:
exp -> exp DIV . exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On WHILE shift to state 1
-- On STRING shift to state 2
-- On REAL shift to state 3
-- On LPAREN shift to state 4
-- On LOGIC shift to state 5
-- On LET shift to state 6
-- On INTEGER shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On BREAK shift to state 16
-- On var shift to state 17
-- On exp shift to state 29

State 29:
exp -> exp . PLUS exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . MINUS exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . TIMES exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . DIV exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp DIV exp . [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . MOD exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . POW exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . EQ exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . NE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . GT exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . GE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . LT exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . LE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . AND exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . OR exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On POW shift to state 22
-- On VAR reduce production exp -> exp DIV exp 
-- On TYPE reduce production exp -> exp DIV exp 
-- On TIMES reduce production exp -> exp DIV exp 
-- On THEN reduce production exp -> exp DIV exp 
-- On SEMI reduce production exp -> exp DIV exp 
-- On RPAREN reduce production exp -> exp DIV exp 
-- On PLUS reduce production exp -> exp DIV exp 
-- On OR reduce production exp -> exp DIV exp 
-- On NE reduce production exp -> exp DIV exp 
-- On MOD reduce production exp -> exp DIV exp 
-- On MINUS reduce production exp -> exp DIV exp 
-- On LT reduce production exp -> exp DIV exp 
-- On LE reduce production exp -> exp DIV exp 
-- On IN reduce production exp -> exp DIV exp 
-- On GT reduce production exp -> exp DIV exp 
-- On GE reduce production exp -> exp DIV exp 
-- On FUNCTION reduce production exp -> exp DIV exp 
-- On EQ reduce production exp -> exp DIV exp 
-- On EOF reduce production exp -> exp DIV exp 
-- On END reduce production exp -> exp DIV exp 
-- On ELSE reduce production exp -> exp DIV exp 
-- On DO reduce production exp -> exp DIV exp 
-- On DIV reduce production exp -> exp DIV exp 
-- On COMMA reduce production exp -> exp DIV exp 
-- On AND reduce production exp -> exp DIV exp 

State 30:
exp -> exp OR . exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On WHILE shift to state 1
-- On STRING shift to state 2
-- On REAL shift to state 3
-- On LPAREN shift to state 4
-- On LOGIC shift to state 5
-- On LET shift to state 6
-- On INTEGER shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On BREAK shift to state 16
-- On var shift to state 17
-- On exp shift to state 31

State 31:
exp -> exp . PLUS exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . MINUS exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . TIMES exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . DIV exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . MOD exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . POW exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . EQ exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . NE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . GT exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . GE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . LT exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . LE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . AND exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . OR exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp OR exp . [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On TIMES shift to state 20
-- On POW shift to state 22
-- On PLUS shift to state 24
-- On NE shift to state 32
-- On MOD shift to state 26
-- On MINUS shift to state 34
-- On LT shift to state 36
-- On LE shift to state 38
-- On GT shift to state 40
-- On GE shift to state 42
-- On EQ shift to state 44
-- On DIV shift to state 28
-- On AND shift to state 46
-- On VAR reduce production exp -> exp OR exp 
-- On TYPE reduce production exp -> exp OR exp 
-- On THEN reduce production exp -> exp OR exp 
-- On SEMI reduce production exp -> exp OR exp 
-- On RPAREN reduce production exp -> exp OR exp 
-- On OR reduce production exp -> exp OR exp 
-- On IN reduce production exp -> exp OR exp 
-- On FUNCTION reduce production exp -> exp OR exp 
-- On EOF reduce production exp -> exp OR exp 
-- On END reduce production exp -> exp OR exp 
-- On ELSE reduce production exp -> exp OR exp 
-- On DO reduce production exp -> exp OR exp 
-- On COMMA reduce production exp -> exp OR exp 

State 32:
exp -> exp NE . exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On WHILE shift to state 1
-- On STRING shift to state 2
-- On REAL shift to state 3
-- On LPAREN shift to state 4
-- On LOGIC shift to state 5
-- On LET shift to state 6
-- On INTEGER shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On BREAK shift to state 16
-- On var shift to state 17
-- On exp shift to state 33

State 33:
exp -> exp . PLUS exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . MINUS exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . TIMES exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . DIV exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . MOD exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . POW exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . EQ exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . NE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp NE exp . [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . GT exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . GE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . LT exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . LE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . AND exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . OR exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On TIMES shift to state 20
-- On POW shift to state 22
-- On PLUS shift to state 24
-- On MOD shift to state 26
-- On MINUS shift to state 34
-- On DIV shift to state 28
-- On VAR reduce production exp -> exp NE exp 
-- On TYPE reduce production exp -> exp NE exp 
-- On THEN reduce production exp -> exp NE exp 
-- On SEMI reduce production exp -> exp NE exp 
-- On RPAREN reduce production exp -> exp NE exp 
-- On OR reduce production exp -> exp NE exp 
-- On IN reduce production exp -> exp NE exp 
-- On FUNCTION reduce production exp -> exp NE exp 
-- On EOF reduce production exp -> exp NE exp 
-- On END reduce production exp -> exp NE exp 
-- On ELSE reduce production exp -> exp NE exp 
-- On DO reduce production exp -> exp NE exp 
-- On COMMA reduce production exp -> exp NE exp 
-- On AND reduce production exp -> exp NE exp 

State 34:
exp -> exp MINUS . exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On WHILE shift to state 1
-- On STRING shift to state 2
-- On REAL shift to state 3
-- On LPAREN shift to state 4
-- On LOGIC shift to state 5
-- On LET shift to state 6
-- On INTEGER shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On BREAK shift to state 16
-- On var shift to state 17
-- On exp shift to state 35

State 35:
exp -> exp . PLUS exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . MINUS exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp MINUS exp . [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . TIMES exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . DIV exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . MOD exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . POW exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . EQ exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . NE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . GT exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . GE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . LT exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . LE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . AND exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . OR exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On TIMES shift to state 20
-- On POW shift to state 22
-- On MOD shift to state 26
-- On DIV shift to state 28
-- On VAR reduce production exp -> exp MINUS exp 
-- On TYPE reduce production exp -> exp MINUS exp 
-- On THEN reduce production exp -> exp MINUS exp 
-- On SEMI reduce production exp -> exp MINUS exp 
-- On RPAREN reduce production exp -> exp MINUS exp 
-- On PLUS reduce production exp -> exp MINUS exp 
-- On OR reduce production exp -> exp MINUS exp 
-- On NE reduce production exp -> exp MINUS exp 
-- On MINUS reduce production exp -> exp MINUS exp 
-- On LT reduce production exp -> exp MINUS exp 
-- On LE reduce production exp -> exp MINUS exp 
-- On IN reduce production exp -> exp MINUS exp 
-- On GT reduce production exp -> exp MINUS exp 
-- On GE reduce production exp -> exp MINUS exp 
-- On FUNCTION reduce production exp -> exp MINUS exp 
-- On EQ reduce production exp -> exp MINUS exp 
-- On EOF reduce production exp -> exp MINUS exp 
-- On END reduce production exp -> exp MINUS exp 
-- On ELSE reduce production exp -> exp MINUS exp 
-- On DO reduce production exp -> exp MINUS exp 
-- On COMMA reduce production exp -> exp MINUS exp 
-- On AND reduce production exp -> exp MINUS exp 

State 36:
exp -> exp LT . exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On WHILE shift to state 1
-- On STRING shift to state 2
-- On REAL shift to state 3
-- On LPAREN shift to state 4
-- On LOGIC shift to state 5
-- On LET shift to state 6
-- On INTEGER shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On BREAK shift to state 16
-- On var shift to state 17
-- On exp shift to state 37

State 37:
exp -> exp . PLUS exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . MINUS exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . TIMES exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . DIV exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . MOD exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . POW exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . EQ exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . NE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . GT exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . GE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . LT exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp LT exp . [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . LE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . AND exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . OR exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On TIMES shift to state 20
-- On POW shift to state 22
-- On PLUS shift to state 24
-- On MOD shift to state 26
-- On MINUS shift to state 34
-- On DIV shift to state 28
-- On VAR reduce production exp -> exp LT exp 
-- On TYPE reduce production exp -> exp LT exp 
-- On THEN reduce production exp -> exp LT exp 
-- On SEMI reduce production exp -> exp LT exp 
-- On RPAREN reduce production exp -> exp LT exp 
-- On OR reduce production exp -> exp LT exp 
-- On IN reduce production exp -> exp LT exp 
-- On FUNCTION reduce production exp -> exp LT exp 
-- On EOF reduce production exp -> exp LT exp 
-- On END reduce production exp -> exp LT exp 
-- On ELSE reduce production exp -> exp LT exp 
-- On DO reduce production exp -> exp LT exp 
-- On COMMA reduce production exp -> exp LT exp 
-- On AND reduce production exp -> exp LT exp 

State 38:
exp -> exp LE . exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On WHILE shift to state 1
-- On STRING shift to state 2
-- On REAL shift to state 3
-- On LPAREN shift to state 4
-- On LOGIC shift to state 5
-- On LET shift to state 6
-- On INTEGER shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On BREAK shift to state 16
-- On var shift to state 17
-- On exp shift to state 39

State 39:
exp -> exp . PLUS exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . MINUS exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . TIMES exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . DIV exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . MOD exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . POW exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . EQ exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . NE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . GT exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . GE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . LT exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . LE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp LE exp . [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . AND exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . OR exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On TIMES shift to state 20
-- On POW shift to state 22
-- On PLUS shift to state 24
-- On MOD shift to state 26
-- On MINUS shift to state 34
-- On DIV shift to state 28
-- On VAR reduce production exp -> exp LE exp 
-- On TYPE reduce production exp -> exp LE exp 
-- On THEN reduce production exp -> exp LE exp 
-- On SEMI reduce production exp -> exp LE exp 
-- On RPAREN reduce production exp -> exp LE exp 
-- On OR reduce production exp -> exp LE exp 
-- On IN reduce production exp -> exp LE exp 
-- On FUNCTION reduce production exp -> exp LE exp 
-- On EOF reduce production exp -> exp LE exp 
-- On END reduce production exp -> exp LE exp 
-- On ELSE reduce production exp -> exp LE exp 
-- On DO reduce production exp -> exp LE exp 
-- On COMMA reduce production exp -> exp LE exp 
-- On AND reduce production exp -> exp LE exp 

State 40:
exp -> exp GT . exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On WHILE shift to state 1
-- On STRING shift to state 2
-- On REAL shift to state 3
-- On LPAREN shift to state 4
-- On LOGIC shift to state 5
-- On LET shift to state 6
-- On INTEGER shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On BREAK shift to state 16
-- On var shift to state 17
-- On exp shift to state 41

State 41:
exp -> exp . PLUS exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . MINUS exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . TIMES exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . DIV exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . MOD exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . POW exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . EQ exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . NE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . GT exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp GT exp . [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . GE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . LT exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . LE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . AND exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . OR exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On TIMES shift to state 20
-- On POW shift to state 22
-- On PLUS shift to state 24
-- On MOD shift to state 26
-- On MINUS shift to state 34
-- On DIV shift to state 28
-- On VAR reduce production exp -> exp GT exp 
-- On TYPE reduce production exp -> exp GT exp 
-- On THEN reduce production exp -> exp GT exp 
-- On SEMI reduce production exp -> exp GT exp 
-- On RPAREN reduce production exp -> exp GT exp 
-- On OR reduce production exp -> exp GT exp 
-- On IN reduce production exp -> exp GT exp 
-- On FUNCTION reduce production exp -> exp GT exp 
-- On EOF reduce production exp -> exp GT exp 
-- On END reduce production exp -> exp GT exp 
-- On ELSE reduce production exp -> exp GT exp 
-- On DO reduce production exp -> exp GT exp 
-- On COMMA reduce production exp -> exp GT exp 
-- On AND reduce production exp -> exp GT exp 

State 42:
exp -> exp GE . exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On WHILE shift to state 1
-- On STRING shift to state 2
-- On REAL shift to state 3
-- On LPAREN shift to state 4
-- On LOGIC shift to state 5
-- On LET shift to state 6
-- On INTEGER shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On BREAK shift to state 16
-- On var shift to state 17
-- On exp shift to state 43

State 43:
exp -> exp . PLUS exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . MINUS exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . TIMES exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . DIV exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . MOD exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . POW exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . EQ exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . NE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . GT exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . GE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp GE exp . [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . LT exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . LE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . AND exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . OR exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On TIMES shift to state 20
-- On POW shift to state 22
-- On PLUS shift to state 24
-- On MOD shift to state 26
-- On MINUS shift to state 34
-- On DIV shift to state 28
-- On VAR reduce production exp -> exp GE exp 
-- On TYPE reduce production exp -> exp GE exp 
-- On THEN reduce production exp -> exp GE exp 
-- On SEMI reduce production exp -> exp GE exp 
-- On RPAREN reduce production exp -> exp GE exp 
-- On OR reduce production exp -> exp GE exp 
-- On IN reduce production exp -> exp GE exp 
-- On FUNCTION reduce production exp -> exp GE exp 
-- On EOF reduce production exp -> exp GE exp 
-- On END reduce production exp -> exp GE exp 
-- On ELSE reduce production exp -> exp GE exp 
-- On DO reduce production exp -> exp GE exp 
-- On COMMA reduce production exp -> exp GE exp 
-- On AND reduce production exp -> exp GE exp 

State 44:
exp -> exp EQ . exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On WHILE shift to state 1
-- On STRING shift to state 2
-- On REAL shift to state 3
-- On LPAREN shift to state 4
-- On LOGIC shift to state 5
-- On LET shift to state 6
-- On INTEGER shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On BREAK shift to state 16
-- On var shift to state 17
-- On exp shift to state 45

State 45:
exp -> exp . PLUS exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . MINUS exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . TIMES exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . DIV exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . MOD exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . POW exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . EQ exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp EQ exp . [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . NE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . GT exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . GE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . LT exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . LE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . AND exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . OR exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On TIMES shift to state 20
-- On POW shift to state 22
-- On PLUS shift to state 24
-- On MOD shift to state 26
-- On MINUS shift to state 34
-- On DIV shift to state 28
-- On VAR reduce production exp -> exp EQ exp 
-- On TYPE reduce production exp -> exp EQ exp 
-- On THEN reduce production exp -> exp EQ exp 
-- On SEMI reduce production exp -> exp EQ exp 
-- On RPAREN reduce production exp -> exp EQ exp 
-- On OR reduce production exp -> exp EQ exp 
-- On IN reduce production exp -> exp EQ exp 
-- On FUNCTION reduce production exp -> exp EQ exp 
-- On EOF reduce production exp -> exp EQ exp 
-- On END reduce production exp -> exp EQ exp 
-- On ELSE reduce production exp -> exp EQ exp 
-- On DO reduce production exp -> exp EQ exp 
-- On COMMA reduce production exp -> exp EQ exp 
-- On AND reduce production exp -> exp EQ exp 

State 46:
exp -> exp AND . exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On WHILE shift to state 1
-- On STRING shift to state 2
-- On REAL shift to state 3
-- On LPAREN shift to state 4
-- On LOGIC shift to state 5
-- On LET shift to state 6
-- On INTEGER shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On BREAK shift to state 16
-- On var shift to state 17
-- On exp shift to state 47

State 47:
exp -> exp . PLUS exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . MINUS exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . TIMES exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . DIV exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . MOD exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . POW exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . EQ exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . NE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . GT exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . GE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . LT exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . LE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . AND exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp AND exp . [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . OR exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On TIMES shift to state 20
-- On POW shift to state 22
-- On PLUS shift to state 24
-- On NE shift to state 32
-- On MOD shift to state 26
-- On MINUS shift to state 34
-- On LT shift to state 36
-- On LE shift to state 38
-- On GT shift to state 40
-- On GE shift to state 42
-- On EQ shift to state 44
-- On DIV shift to state 28
-- On VAR reduce production exp -> exp AND exp 
-- On TYPE reduce production exp -> exp AND exp 
-- On THEN reduce production exp -> exp AND exp 
-- On SEMI reduce production exp -> exp AND exp 
-- On RPAREN reduce production exp -> exp AND exp 
-- On OR reduce production exp -> exp AND exp 
-- On IN reduce production exp -> exp AND exp 
-- On FUNCTION reduce production exp -> exp AND exp 
-- On EOF reduce production exp -> exp AND exp 
-- On END reduce production exp -> exp AND exp 
-- On ELSE reduce production exp -> exp AND exp 
-- On DO reduce production exp -> exp AND exp 
-- On COMMA reduce production exp -> exp AND exp 
-- On AND reduce production exp -> exp AND exp 

State 48:
loption(separated_nonempty_list(COMMA,exp)) -> separated_nonempty_list(COMMA,exp) . [ RPAREN ]
-- On RPAREN reduce production loption(separated_nonempty_list(COMMA,exp)) -> separated_nonempty_list(COMMA,exp) 

State 49:
exp -> ID LPAREN loption(separated_nonempty_list(COMMA,exp)) . RPAREN [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On RPAREN shift to state 50

State 50:
exp -> ID LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN . [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On VAR reduce production exp -> ID LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 
-- On TYPE reduce production exp -> ID LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 
-- On TIMES reduce production exp -> ID LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 
-- On THEN reduce production exp -> ID LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 
-- On SEMI reduce production exp -> ID LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 
-- On RPAREN reduce production exp -> ID LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 
-- On POW reduce production exp -> ID LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 
-- On PLUS reduce production exp -> ID LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 
-- On OR reduce production exp -> ID LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 
-- On NE reduce production exp -> ID LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 
-- On MOD reduce production exp -> ID LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 
-- On MINUS reduce production exp -> ID LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 
-- On LT reduce production exp -> ID LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 
-- On LE reduce production exp -> ID LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 
-- On IN reduce production exp -> ID LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 
-- On GT reduce production exp -> ID LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 
-- On GE reduce production exp -> ID LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 
-- On FUNCTION reduce production exp -> ID LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 
-- On EQ reduce production exp -> ID LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 
-- On EOF reduce production exp -> ID LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 
-- On END reduce production exp -> ID LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 
-- On ELSE reduce production exp -> ID LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 
-- On DO reduce production exp -> ID LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 
-- On DIV reduce production exp -> ID LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 
-- On COMMA reduce production exp -> ID LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 
-- On AND reduce production exp -> ID LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 

State 51:
exp -> exp . PLUS exp [ TIMES RPAREN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV COMMA AND ]
exp -> exp . MINUS exp [ TIMES RPAREN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV COMMA AND ]
exp -> exp . TIMES exp [ TIMES RPAREN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV COMMA AND ]
exp -> exp . DIV exp [ TIMES RPAREN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV COMMA AND ]
exp -> exp . MOD exp [ TIMES RPAREN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV COMMA AND ]
exp -> exp . POW exp [ TIMES RPAREN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV COMMA AND ]
exp -> exp . EQ exp [ TIMES RPAREN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV COMMA AND ]
exp -> exp . NE exp [ TIMES RPAREN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV COMMA AND ]
exp -> exp . GT exp [ TIMES RPAREN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV COMMA AND ]
exp -> exp . GE exp [ TIMES RPAREN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV COMMA AND ]
exp -> exp . LT exp [ TIMES RPAREN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV COMMA AND ]
exp -> exp . LE exp [ TIMES RPAREN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV COMMA AND ]
exp -> exp . AND exp [ TIMES RPAREN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV COMMA AND ]
exp -> exp . OR exp [ TIMES RPAREN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV COMMA AND ]
separated_nonempty_list(COMMA,exp) -> exp . [ RPAREN ]
separated_nonempty_list(COMMA,exp) -> exp . COMMA separated_nonempty_list(COMMA,exp) [ RPAREN ]
-- On TIMES shift to state 20
-- On POW shift to state 22
-- On PLUS shift to state 24
-- On OR shift to state 30
-- On NE shift to state 32
-- On MOD shift to state 26
-- On MINUS shift to state 34
-- On LT shift to state 36
-- On LE shift to state 38
-- On GT shift to state 40
-- On GE shift to state 42
-- On EQ shift to state 44
-- On DIV shift to state 28
-- On COMMA shift to state 52
-- On AND shift to state 46
-- On RPAREN reduce production separated_nonempty_list(COMMA,exp) -> exp 

State 52:
separated_nonempty_list(COMMA,exp) -> exp COMMA . separated_nonempty_list(COMMA,exp) [ RPAREN ]
-- On WHILE shift to state 1
-- On STRING shift to state 2
-- On REAL shift to state 3
-- On LPAREN shift to state 4
-- On LOGIC shift to state 5
-- On LET shift to state 6
-- On INTEGER shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On BREAK shift to state 16
-- On var shift to state 17
-- On separated_nonempty_list(COMMA,exp) shift to state 53
-- On exp shift to state 51

State 53:
separated_nonempty_list(COMMA,exp) -> exp COMMA separated_nonempty_list(COMMA,exp) . [ RPAREN ]
-- On RPAREN reduce production separated_nonempty_list(COMMA,exp) -> exp COMMA separated_nonempty_list(COMMA,exp) 

State 54:
exp -> exp . PLUS exp [ TIMES THEN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV AND ]
exp -> exp . MINUS exp [ TIMES THEN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV AND ]
exp -> exp . TIMES exp [ TIMES THEN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV AND ]
exp -> exp . DIV exp [ TIMES THEN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV AND ]
exp -> exp . MOD exp [ TIMES THEN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV AND ]
exp -> exp . POW exp [ TIMES THEN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV AND ]
exp -> exp . EQ exp [ TIMES THEN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV AND ]
exp -> exp . NE exp [ TIMES THEN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV AND ]
exp -> exp . GT exp [ TIMES THEN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV AND ]
exp -> exp . GE exp [ TIMES THEN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV AND ]
exp -> exp . LT exp [ TIMES THEN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV AND ]
exp -> exp . LE exp [ TIMES THEN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV AND ]
exp -> exp . AND exp [ TIMES THEN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV AND ]
exp -> exp . OR exp [ TIMES THEN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV AND ]
exp -> IF exp . THEN exp ELSE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> IF exp . THEN exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On TIMES shift to state 20
-- On THEN shift to state 55
-- On POW shift to state 22
-- On PLUS shift to state 24
-- On OR shift to state 30
-- On NE shift to state 32
-- On MOD shift to state 26
-- On MINUS shift to state 34
-- On LT shift to state 36
-- On LE shift to state 38
-- On GT shift to state 40
-- On GE shift to state 42
-- On EQ shift to state 44
-- On DIV shift to state 28
-- On AND shift to state 46

State 55:
exp -> IF exp THEN . exp ELSE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> IF exp THEN . exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On WHILE shift to state 1
-- On STRING shift to state 2
-- On REAL shift to state 3
-- On LPAREN shift to state 4
-- On LOGIC shift to state 5
-- On LET shift to state 6
-- On INTEGER shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On BREAK shift to state 16
-- On var shift to state 17
-- On exp shift to state 56

State 56:
exp -> exp . PLUS exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . MINUS exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . TIMES exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . DIV exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . MOD exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . POW exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . EQ exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . NE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . GT exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . GE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . LT exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . LE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . AND exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . OR exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> IF exp THEN exp . ELSE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> IF exp THEN exp . [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On TIMES shift to state 20
-- On POW shift to state 22
-- On PLUS shift to state 24
-- On OR shift to state 30
-- On NE shift to state 32
-- On MOD shift to state 26
-- On MINUS shift to state 34
-- On LT shift to state 36
-- On LE shift to state 38
-- On GT shift to state 40
-- On GE shift to state 42
-- On EQ shift to state 44
-- On ELSE shift to state 57
-- On DIV shift to state 28
-- On AND shift to state 46
-- On VAR reduce production exp -> IF exp THEN exp 
-- On TYPE reduce production exp -> IF exp THEN exp 
-- On THEN reduce production exp -> IF exp THEN exp 
-- On SEMI reduce production exp -> IF exp THEN exp 
-- On RPAREN reduce production exp -> IF exp THEN exp 
-- On IN reduce production exp -> IF exp THEN exp 
-- On FUNCTION reduce production exp -> IF exp THEN exp 
-- On EOF reduce production exp -> IF exp THEN exp 
-- On END reduce production exp -> IF exp THEN exp 
-- On DO reduce production exp -> IF exp THEN exp 
-- On COMMA reduce production exp -> IF exp THEN exp 

State 57:
exp -> IF exp THEN exp ELSE . exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On WHILE shift to state 1
-- On STRING shift to state 2
-- On REAL shift to state 3
-- On LPAREN shift to state 4
-- On LOGIC shift to state 5
-- On LET shift to state 6
-- On INTEGER shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On BREAK shift to state 16
-- On var shift to state 17
-- On exp shift to state 58

State 58:
exp -> exp . PLUS exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . MINUS exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . TIMES exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . DIV exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . MOD exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . POW exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . EQ exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . NE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . GT exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . GE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . LT exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . LE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . AND exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . OR exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> IF exp THEN exp ELSE exp . [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On TIMES shift to state 20
-- On POW shift to state 22
-- On PLUS shift to state 24
-- On OR shift to state 30
-- On NE shift to state 32
-- On MOD shift to state 26
-- On MINUS shift to state 34
-- On LT shift to state 36
-- On LE shift to state 38
-- On GT shift to state 40
-- On GE shift to state 42
-- On EQ shift to state 44
-- On DIV shift to state 28
-- On AND shift to state 46
-- On VAR reduce production exp -> IF exp THEN exp ELSE exp 
-- On TYPE reduce production exp -> IF exp THEN exp ELSE exp 
-- On THEN reduce production exp -> IF exp THEN exp ELSE exp 
-- On SEMI reduce production exp -> IF exp THEN exp ELSE exp 
-- On RPAREN reduce production exp -> IF exp THEN exp ELSE exp 
-- On IN reduce production exp -> IF exp THEN exp ELSE exp 
-- On FUNCTION reduce production exp -> IF exp THEN exp ELSE exp 
-- On EOF reduce production exp -> IF exp THEN exp ELSE exp 
-- On END reduce production exp -> IF exp THEN exp ELSE exp 
-- On ELSE reduce production exp -> IF exp THEN exp ELSE exp 
-- On DO reduce production exp -> IF exp THEN exp ELSE exp 
-- On COMMA reduce production exp -> IF exp THEN exp ELSE exp 

State 59:
exp -> exp . PLUS exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . MINUS exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . TIMES exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . DIV exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . MOD exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . POW exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . EQ exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . NE exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . GT exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . GE exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . LT exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . LE exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . AND exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . OR exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
vardec -> VAR ID COLON ID ASSIGN exp . [ VAR TYPE IN FUNCTION ]
-- On TIMES shift to state 20
-- On POW shift to state 22
-- On PLUS shift to state 24
-- On OR shift to state 30
-- On NE shift to state 32
-- On MOD shift to state 26
-- On MINUS shift to state 34
-- On LT shift to state 36
-- On LE shift to state 38
-- On GT shift to state 40
-- On GE shift to state 42
-- On EQ shift to state 44
-- On DIV shift to state 28
-- On AND shift to state 46
-- On VAR reduce production vardec -> VAR ID COLON ID ASSIGN exp 
-- On TYPE reduce production vardec -> VAR ID COLON ID ASSIGN exp 
-- On IN reduce production vardec -> VAR ID COLON ID ASSIGN exp 
-- On FUNCTION reduce production vardec -> VAR ID COLON ID ASSIGN exp 

State 60:
vardec -> VAR ID ASSIGN . exp [ VAR TYPE IN FUNCTION ]
-- On WHILE shift to state 1
-- On STRING shift to state 2
-- On REAL shift to state 3
-- On LPAREN shift to state 4
-- On LOGIC shift to state 5
-- On LET shift to state 6
-- On INTEGER shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On BREAK shift to state 16
-- On var shift to state 17
-- On exp shift to state 61

State 61:
exp -> exp . PLUS exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . MINUS exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . TIMES exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . DIV exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . MOD exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . POW exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . EQ exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . NE exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . GT exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . GE exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . LT exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . LE exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . AND exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . OR exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
vardec -> VAR ID ASSIGN exp . [ VAR TYPE IN FUNCTION ]
-- On TIMES shift to state 20
-- On POW shift to state 22
-- On PLUS shift to state 24
-- On OR shift to state 30
-- On NE shift to state 32
-- On MOD shift to state 26
-- On MINUS shift to state 34
-- On LT shift to state 36
-- On LE shift to state 38
-- On GT shift to state 40
-- On GE shift to state 42
-- On EQ shift to state 44
-- On DIV shift to state 28
-- On AND shift to state 46
-- On VAR reduce production vardec -> VAR ID ASSIGN exp 
-- On TYPE reduce production vardec -> VAR ID ASSIGN exp 
-- On IN reduce production vardec -> VAR ID ASSIGN exp 
-- On FUNCTION reduce production vardec -> VAR ID ASSIGN exp 

State 62:
typedec -> TYPE . ID ASSIGN typeCons [ VAR TYPE IN FUNCTION ]
-- On ID shift to state 63

State 63:
typedec -> TYPE ID . ASSIGN typeCons [ VAR TYPE IN FUNCTION ]
-- On ASSIGN shift to state 64

State 64:
typedec -> TYPE ID ASSIGN . typeCons [ VAR TYPE IN FUNCTION ]
-- On ID shift to state 65
-- On typeCons shift to state 66

State 65:
typeCons -> ID . [ VAR TYPE IN FUNCTION ]
-- On VAR reduce production typeCons -> ID 
-- On TYPE reduce production typeCons -> ID 
-- On IN reduce production typeCons -> ID 
-- On FUNCTION reduce production typeCons -> ID 

State 66:
typedec -> TYPE ID ASSIGN typeCons . [ VAR TYPE IN FUNCTION ]
-- On VAR reduce production typedec -> TYPE ID ASSIGN typeCons 
-- On TYPE reduce production typedec -> TYPE ID ASSIGN typeCons 
-- On IN reduce production typedec -> TYPE ID ASSIGN typeCons 
-- On FUNCTION reduce production typedec -> TYPE ID ASSIGN typeCons 

State 67:
funcdec -> FUNCTION . ID LPAREN loption(separated_nonempty_list(COMMA,parameter)) RPAREN EQ exp [ VAR TYPE IN FUNCTION ]
funcdec -> FUNCTION . ID LPAREN loption(separated_nonempty_list(COMMA,parameter)) RPAREN COLON ID EQ exp [ VAR TYPE IN FUNCTION ]
-- On ID shift to state 68

State 68:
funcdec -> FUNCTION ID . LPAREN loption(separated_nonempty_list(COMMA,parameter)) RPAREN EQ exp [ VAR TYPE IN FUNCTION ]
funcdec -> FUNCTION ID . LPAREN loption(separated_nonempty_list(COMMA,parameter)) RPAREN COLON ID EQ exp [ VAR TYPE IN FUNCTION ]
-- On LPAREN shift to state 69

State 69:
funcdec -> FUNCTION ID LPAREN . loption(separated_nonempty_list(COMMA,parameter)) RPAREN EQ exp [ VAR TYPE IN FUNCTION ]
funcdec -> FUNCTION ID LPAREN . loption(separated_nonempty_list(COMMA,parameter)) RPAREN COLON ID EQ exp [ VAR TYPE IN FUNCTION ]
-- On ID shift to state 70
-- On separated_nonempty_list(COMMA,parameter) shift to state 73
-- On parameter shift to state 74
-- On loption(separated_nonempty_list(COMMA,parameter)) shift to state 77
-- On RPAREN reduce production loption(separated_nonempty_list(COMMA,parameter)) -> 

State 70:
parameter -> ID . COLON ID [ RPAREN COMMA ]
-- On COLON shift to state 71

State 71:
parameter -> ID COLON . ID [ RPAREN COMMA ]
-- On ID shift to state 72

State 72:
parameter -> ID COLON ID . [ RPAREN COMMA ]
-- On RPAREN reduce production parameter -> ID COLON ID 
-- On COMMA reduce production parameter -> ID COLON ID 

State 73:
loption(separated_nonempty_list(COMMA,parameter)) -> separated_nonempty_list(COMMA,parameter) . [ RPAREN ]
-- On RPAREN reduce production loption(separated_nonempty_list(COMMA,parameter)) -> separated_nonempty_list(COMMA,parameter) 

State 74:
separated_nonempty_list(COMMA,parameter) -> parameter . [ RPAREN ]
separated_nonempty_list(COMMA,parameter) -> parameter . COMMA separated_nonempty_list(COMMA,parameter) [ RPAREN ]
-- On COMMA shift to state 75
-- On RPAREN reduce production separated_nonempty_list(COMMA,parameter) -> parameter 

State 75:
separated_nonempty_list(COMMA,parameter) -> parameter COMMA . separated_nonempty_list(COMMA,parameter) [ RPAREN ]
-- On ID shift to state 70
-- On separated_nonempty_list(COMMA,parameter) shift to state 76
-- On parameter shift to state 74

State 76:
separated_nonempty_list(COMMA,parameter) -> parameter COMMA separated_nonempty_list(COMMA,parameter) . [ RPAREN ]
-- On RPAREN reduce production separated_nonempty_list(COMMA,parameter) -> parameter COMMA separated_nonempty_list(COMMA,parameter) 

State 77:
funcdec -> FUNCTION ID LPAREN loption(separated_nonempty_list(COMMA,parameter)) . RPAREN EQ exp [ VAR TYPE IN FUNCTION ]
funcdec -> FUNCTION ID LPAREN loption(separated_nonempty_list(COMMA,parameter)) . RPAREN COLON ID EQ exp [ VAR TYPE IN FUNCTION ]
-- On RPAREN shift to state 78

State 78:
funcdec -> FUNCTION ID LPAREN loption(separated_nonempty_list(COMMA,parameter)) RPAREN . EQ exp [ VAR TYPE IN FUNCTION ]
funcdec -> FUNCTION ID LPAREN loption(separated_nonempty_list(COMMA,parameter)) RPAREN . COLON ID EQ exp [ VAR TYPE IN FUNCTION ]
-- On EQ shift to state 79
-- On COLON shift to state 81

State 79:
funcdec -> FUNCTION ID LPAREN loption(separated_nonempty_list(COMMA,parameter)) RPAREN EQ . exp [ VAR TYPE IN FUNCTION ]
-- On WHILE shift to state 1
-- On STRING shift to state 2
-- On REAL shift to state 3
-- On LPAREN shift to state 4
-- On LOGIC shift to state 5
-- On LET shift to state 6
-- On INTEGER shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On BREAK shift to state 16
-- On var shift to state 17
-- On exp shift to state 80

State 80:
exp -> exp . PLUS exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . MINUS exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . TIMES exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . DIV exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . MOD exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . POW exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . EQ exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . NE exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . GT exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . GE exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . LT exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . LE exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . AND exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . OR exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
funcdec -> FUNCTION ID LPAREN loption(separated_nonempty_list(COMMA,parameter)) RPAREN EQ exp . [ VAR TYPE IN FUNCTION ]
-- On TIMES shift to state 20
-- On POW shift to state 22
-- On PLUS shift to state 24
-- On OR shift to state 30
-- On NE shift to state 32
-- On MOD shift to state 26
-- On MINUS shift to state 34
-- On LT shift to state 36
-- On LE shift to state 38
-- On GT shift to state 40
-- On GE shift to state 42
-- On EQ shift to state 44
-- On DIV shift to state 28
-- On AND shift to state 46
-- On VAR reduce production funcdec -> FUNCTION ID LPAREN loption(separated_nonempty_list(COMMA,parameter)) RPAREN EQ exp 
-- On TYPE reduce production funcdec -> FUNCTION ID LPAREN loption(separated_nonempty_list(COMMA,parameter)) RPAREN EQ exp 
-- On IN reduce production funcdec -> FUNCTION ID LPAREN loption(separated_nonempty_list(COMMA,parameter)) RPAREN EQ exp 
-- On FUNCTION reduce production funcdec -> FUNCTION ID LPAREN loption(separated_nonempty_list(COMMA,parameter)) RPAREN EQ exp 

State 81:
funcdec -> FUNCTION ID LPAREN loption(separated_nonempty_list(COMMA,parameter)) RPAREN COLON . ID EQ exp [ VAR TYPE IN FUNCTION ]
-- On ID shift to state 82

State 82:
funcdec -> FUNCTION ID LPAREN loption(separated_nonempty_list(COMMA,parameter)) RPAREN COLON ID . EQ exp [ VAR TYPE IN FUNCTION ]
-- On EQ shift to state 83

State 83:
funcdec -> FUNCTION ID LPAREN loption(separated_nonempty_list(COMMA,parameter)) RPAREN COLON ID EQ . exp [ VAR TYPE IN FUNCTION ]
-- On WHILE shift to state 1
-- On STRING shift to state 2
-- On REAL shift to state 3
-- On LPAREN shift to state 4
-- On LOGIC shift to state 5
-- On LET shift to state 6
-- On INTEGER shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On BREAK shift to state 16
-- On var shift to state 17
-- On exp shift to state 84

State 84:
exp -> exp . PLUS exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . MINUS exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . TIMES exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . DIV exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . MOD exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . POW exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . EQ exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . NE exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . GT exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . GE exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . LT exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . LE exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . AND exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
exp -> exp . OR exp [ VAR TYPE TIMES POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ DIV AND ]
funcdec -> FUNCTION ID LPAREN loption(separated_nonempty_list(COMMA,parameter)) RPAREN COLON ID EQ exp . [ VAR TYPE IN FUNCTION ]
-- On TIMES shift to state 20
-- On POW shift to state 22
-- On PLUS shift to state 24
-- On OR shift to state 30
-- On NE shift to state 32
-- On MOD shift to state 26
-- On MINUS shift to state 34
-- On LT shift to state 36
-- On LE shift to state 38
-- On GT shift to state 40
-- On GE shift to state 42
-- On EQ shift to state 44
-- On DIV shift to state 28
-- On AND shift to state 46
-- On VAR reduce production funcdec -> FUNCTION ID LPAREN loption(separated_nonempty_list(COMMA,parameter)) RPAREN COLON ID EQ exp 
-- On TYPE reduce production funcdec -> FUNCTION ID LPAREN loption(separated_nonempty_list(COMMA,parameter)) RPAREN COLON ID EQ exp 
-- On IN reduce production funcdec -> FUNCTION ID LPAREN loption(separated_nonempty_list(COMMA,parameter)) RPAREN COLON ID EQ exp 
-- On FUNCTION reduce production funcdec -> FUNCTION ID LPAREN loption(separated_nonempty_list(COMMA,parameter)) RPAREN COLON ID EQ exp 

State 85:
dec -> vardec . [ VAR TYPE IN FUNCTION ]
-- On VAR reduce production dec -> vardec 
-- On TYPE reduce production dec -> vardec 
-- On IN reduce production dec -> vardec 
-- On FUNCTION reduce production dec -> vardec 

State 86:
nonempty_list(typedec) -> typedec . [ VAR TYPE IN FUNCTION ]
nonempty_list(typedec) -> typedec . nonempty_list(typedec) [ VAR TYPE IN FUNCTION ]
-- On TYPE shift to state 62
-- On typedec shift to state 86
-- On nonempty_list(typedec) shift to state 87
-- On VAR reduce production nonempty_list(typedec) -> typedec 
-- On TYPE reduce production nonempty_list(typedec) -> typedec 
-- On IN reduce production nonempty_list(typedec) -> typedec 
-- On FUNCTION reduce production nonempty_list(typedec) -> typedec 
** Conflict on TYPE

State 87:
nonempty_list(typedec) -> typedec nonempty_list(typedec) . [ VAR TYPE IN FUNCTION ]
-- On VAR reduce production nonempty_list(typedec) -> typedec nonempty_list(typedec) 
-- On TYPE reduce production nonempty_list(typedec) -> typedec nonempty_list(typedec) 
-- On IN reduce production nonempty_list(typedec) -> typedec nonempty_list(typedec) 
-- On FUNCTION reduce production nonempty_list(typedec) -> typedec nonempty_list(typedec) 

State 88:
dec -> nonempty_list(typedec) . [ VAR TYPE IN FUNCTION ]
-- On VAR reduce production dec -> nonempty_list(typedec) 
-- On TYPE reduce production dec -> nonempty_list(typedec) 
-- On IN reduce production dec -> nonempty_list(typedec) 
-- On FUNCTION reduce production dec -> nonempty_list(typedec) 

State 89:
dec -> nonempty_list(funcdec) . [ VAR TYPE IN FUNCTION ]
-- On VAR reduce production dec -> nonempty_list(funcdec) 
-- On TYPE reduce production dec -> nonempty_list(funcdec) 
-- On IN reduce production dec -> nonempty_list(funcdec) 
-- On FUNCTION reduce production dec -> nonempty_list(funcdec) 

State 90:
decs -> list(dec) . [ IN ]
-- On IN reduce production decs -> list(dec) 

State 91:
nonempty_list(funcdec) -> funcdec . [ VAR TYPE IN FUNCTION ]
nonempty_list(funcdec) -> funcdec . nonempty_list(funcdec) [ VAR TYPE IN FUNCTION ]
-- On FUNCTION shift to state 67
-- On nonempty_list(funcdec) shift to state 92
-- On funcdec shift to state 91
-- On VAR reduce production nonempty_list(funcdec) -> funcdec 
-- On TYPE reduce production nonempty_list(funcdec) -> funcdec 
-- On IN reduce production nonempty_list(funcdec) -> funcdec 
-- On FUNCTION reduce production nonempty_list(funcdec) -> funcdec 
** Conflict on FUNCTION

State 92:
nonempty_list(funcdec) -> funcdec nonempty_list(funcdec) . [ VAR TYPE IN FUNCTION ]
-- On VAR reduce production nonempty_list(funcdec) -> funcdec nonempty_list(funcdec) 
-- On TYPE reduce production nonempty_list(funcdec) -> funcdec nonempty_list(funcdec) 
-- On IN reduce production nonempty_list(funcdec) -> funcdec nonempty_list(funcdec) 
-- On FUNCTION reduce production nonempty_list(funcdec) -> funcdec nonempty_list(funcdec) 

State 93:
exp -> LET decs . IN exp END [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On IN shift to state 94

State 94:
exp -> LET decs IN . exp END [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On WHILE shift to state 1
-- On STRING shift to state 2
-- On REAL shift to state 3
-- On LPAREN shift to state 4
-- On LOGIC shift to state 5
-- On LET shift to state 6
-- On INTEGER shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On BREAK shift to state 16
-- On var shift to state 17
-- On exp shift to state 95

State 95:
exp -> exp . PLUS exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ END DIV AND ]
exp -> exp . MINUS exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ END DIV AND ]
exp -> exp . TIMES exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ END DIV AND ]
exp -> exp . DIV exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ END DIV AND ]
exp -> exp . MOD exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ END DIV AND ]
exp -> exp . POW exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ END DIV AND ]
exp -> exp . EQ exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ END DIV AND ]
exp -> exp . NE exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ END DIV AND ]
exp -> exp . GT exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ END DIV AND ]
exp -> exp . GE exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ END DIV AND ]
exp -> exp . LT exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ END DIV AND ]
exp -> exp . LE exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ END DIV AND ]
exp -> exp . AND exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ END DIV AND ]
exp -> exp . OR exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ END DIV AND ]
exp -> LET decs IN exp . END [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On TIMES shift to state 20
-- On POW shift to state 22
-- On PLUS shift to state 24
-- On OR shift to state 30
-- On NE shift to state 32
-- On MOD shift to state 26
-- On MINUS shift to state 34
-- On LT shift to state 36
-- On LE shift to state 38
-- On GT shift to state 40
-- On GE shift to state 42
-- On EQ shift to state 44
-- On END shift to state 96
-- On DIV shift to state 28
-- On AND shift to state 46

State 96:
exp -> LET decs IN exp END . [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On VAR reduce production exp -> LET decs IN exp END 
-- On TYPE reduce production exp -> LET decs IN exp END 
-- On TIMES reduce production exp -> LET decs IN exp END 
-- On THEN reduce production exp -> LET decs IN exp END 
-- On SEMI reduce production exp -> LET decs IN exp END 
-- On RPAREN reduce production exp -> LET decs IN exp END 
-- On POW reduce production exp -> LET decs IN exp END 
-- On PLUS reduce production exp -> LET decs IN exp END 
-- On OR reduce production exp -> LET decs IN exp END 
-- On NE reduce production exp -> LET decs IN exp END 
-- On MOD reduce production exp -> LET decs IN exp END 
-- On MINUS reduce production exp -> LET decs IN exp END 
-- On LT reduce production exp -> LET decs IN exp END 
-- On LE reduce production exp -> LET decs IN exp END 
-- On IN reduce production exp -> LET decs IN exp END 
-- On GT reduce production exp -> LET decs IN exp END 
-- On GE reduce production exp -> LET decs IN exp END 
-- On FUNCTION reduce production exp -> LET decs IN exp END 
-- On EQ reduce production exp -> LET decs IN exp END 
-- On EOF reduce production exp -> LET decs IN exp END 
-- On END reduce production exp -> LET decs IN exp END 
-- On ELSE reduce production exp -> LET decs IN exp END 
-- On DO reduce production exp -> LET decs IN exp END 
-- On DIV reduce production exp -> LET decs IN exp END 
-- On COMMA reduce production exp -> LET decs IN exp END 
-- On AND reduce production exp -> LET decs IN exp END 

State 97:
list(dec) -> dec . list(dec) [ IN ]
-- On VAR shift to state 7
-- On TYPE shift to state 62
-- On FUNCTION shift to state 67
-- On vardec shift to state 85
-- On typedec shift to state 86
-- On nonempty_list(typedec) shift to state 88
-- On nonempty_list(funcdec) shift to state 89
-- On list(dec) shift to state 98
-- On funcdec shift to state 91
-- On dec shift to state 97
-- On IN reduce production list(dec) -> 

State 98:
list(dec) -> dec list(dec) . [ IN ]
-- On IN reduce production list(dec) -> dec list(dec) 

State 99:
loption(separated_nonempty_list(SEMI,exp)) -> separated_nonempty_list(SEMI,exp) . [ RPAREN ]
-- On RPAREN reduce production loption(separated_nonempty_list(SEMI,exp)) -> separated_nonempty_list(SEMI,exp) 

State 100:
exp -> LPAREN loption(separated_nonempty_list(SEMI,exp)) . RPAREN [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On RPAREN shift to state 101

State 101:
exp -> LPAREN loption(separated_nonempty_list(SEMI,exp)) RPAREN . [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On VAR reduce production exp -> LPAREN loption(separated_nonempty_list(SEMI,exp)) RPAREN 
-- On TYPE reduce production exp -> LPAREN loption(separated_nonempty_list(SEMI,exp)) RPAREN 
-- On TIMES reduce production exp -> LPAREN loption(separated_nonempty_list(SEMI,exp)) RPAREN 
-- On THEN reduce production exp -> LPAREN loption(separated_nonempty_list(SEMI,exp)) RPAREN 
-- On SEMI reduce production exp -> LPAREN loption(separated_nonempty_list(SEMI,exp)) RPAREN 
-- On RPAREN reduce production exp -> LPAREN loption(separated_nonempty_list(SEMI,exp)) RPAREN 
-- On POW reduce production exp -> LPAREN loption(separated_nonempty_list(SEMI,exp)) RPAREN 
-- On PLUS reduce production exp -> LPAREN loption(separated_nonempty_list(SEMI,exp)) RPAREN 
-- On OR reduce production exp -> LPAREN loption(separated_nonempty_list(SEMI,exp)) RPAREN 
-- On NE reduce production exp -> LPAREN loption(separated_nonempty_list(SEMI,exp)) RPAREN 
-- On MOD reduce production exp -> LPAREN loption(separated_nonempty_list(SEMI,exp)) RPAREN 
-- On MINUS reduce production exp -> LPAREN loption(separated_nonempty_list(SEMI,exp)) RPAREN 
-- On LT reduce production exp -> LPAREN loption(separated_nonempty_list(SEMI,exp)) RPAREN 
-- On LE reduce production exp -> LPAREN loption(separated_nonempty_list(SEMI,exp)) RPAREN 
-- On IN reduce production exp -> LPAREN loption(separated_nonempty_list(SEMI,exp)) RPAREN 
-- On GT reduce production exp -> LPAREN loption(separated_nonempty_list(SEMI,exp)) RPAREN 
-- On GE reduce production exp -> LPAREN loption(separated_nonempty_list(SEMI,exp)) RPAREN 
-- On FUNCTION reduce production exp -> LPAREN loption(separated_nonempty_list(SEMI,exp)) RPAREN 
-- On EQ reduce production exp -> LPAREN loption(separated_nonempty_list(SEMI,exp)) RPAREN 
-- On EOF reduce production exp -> LPAREN loption(separated_nonempty_list(SEMI,exp)) RPAREN 
-- On END reduce production exp -> LPAREN loption(separated_nonempty_list(SEMI,exp)) RPAREN 
-- On ELSE reduce production exp -> LPAREN loption(separated_nonempty_list(SEMI,exp)) RPAREN 
-- On DO reduce production exp -> LPAREN loption(separated_nonempty_list(SEMI,exp)) RPAREN 
-- On DIV reduce production exp -> LPAREN loption(separated_nonempty_list(SEMI,exp)) RPAREN 
-- On COMMA reduce production exp -> LPAREN loption(separated_nonempty_list(SEMI,exp)) RPAREN 
-- On AND reduce production exp -> LPAREN loption(separated_nonempty_list(SEMI,exp)) RPAREN 

State 102:
exp -> exp . PLUS exp [ TIMES SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV AND ]
exp -> exp . MINUS exp [ TIMES SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV AND ]
exp -> exp . TIMES exp [ TIMES SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV AND ]
exp -> exp . DIV exp [ TIMES SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV AND ]
exp -> exp . MOD exp [ TIMES SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV AND ]
exp -> exp . POW exp [ TIMES SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV AND ]
exp -> exp . EQ exp [ TIMES SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV AND ]
exp -> exp . NE exp [ TIMES SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV AND ]
exp -> exp . GT exp [ TIMES SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV AND ]
exp -> exp . GE exp [ TIMES SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV AND ]
exp -> exp . LT exp [ TIMES SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV AND ]
exp -> exp . LE exp [ TIMES SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV AND ]
exp -> exp . AND exp [ TIMES SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV AND ]
exp -> exp . OR exp [ TIMES SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE GT GE EQ DIV AND ]
separated_nonempty_list(SEMI,exp) -> exp . [ RPAREN ]
separated_nonempty_list(SEMI,exp) -> exp . SEMI separated_nonempty_list(SEMI,exp) [ RPAREN ]
-- On TIMES shift to state 20
-- On SEMI shift to state 103
-- On POW shift to state 22
-- On PLUS shift to state 24
-- On OR shift to state 30
-- On NE shift to state 32
-- On MOD shift to state 26
-- On MINUS shift to state 34
-- On LT shift to state 36
-- On LE shift to state 38
-- On GT shift to state 40
-- On GE shift to state 42
-- On EQ shift to state 44
-- On DIV shift to state 28
-- On AND shift to state 46
-- On RPAREN reduce production separated_nonempty_list(SEMI,exp) -> exp 

State 103:
separated_nonempty_list(SEMI,exp) -> exp SEMI . separated_nonempty_list(SEMI,exp) [ RPAREN ]
-- On WHILE shift to state 1
-- On STRING shift to state 2
-- On REAL shift to state 3
-- On LPAREN shift to state 4
-- On LOGIC shift to state 5
-- On LET shift to state 6
-- On INTEGER shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On BREAK shift to state 16
-- On var shift to state 17
-- On separated_nonempty_list(SEMI,exp) shift to state 104
-- On exp shift to state 102

State 104:
separated_nonempty_list(SEMI,exp) -> exp SEMI separated_nonempty_list(SEMI,exp) . [ RPAREN ]
-- On RPAREN reduce production separated_nonempty_list(SEMI,exp) -> exp SEMI separated_nonempty_list(SEMI,exp) 

State 105:
exp -> exp . PLUS exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ DO DIV AND ]
exp -> exp . MINUS exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ DO DIV AND ]
exp -> exp . TIMES exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ DO DIV AND ]
exp -> exp . DIV exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ DO DIV AND ]
exp -> exp . MOD exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ DO DIV AND ]
exp -> exp . POW exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ DO DIV AND ]
exp -> exp . EQ exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ DO DIV AND ]
exp -> exp . NE exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ DO DIV AND ]
exp -> exp . GT exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ DO DIV AND ]
exp -> exp . GE exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ DO DIV AND ]
exp -> exp . LT exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ DO DIV AND ]
exp -> exp . LE exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ DO DIV AND ]
exp -> exp . AND exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ DO DIV AND ]
exp -> exp . OR exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ DO DIV AND ]
exp -> WHILE exp . DO exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On TIMES shift to state 20
-- On POW shift to state 22
-- On PLUS shift to state 24
-- On OR shift to state 30
-- On NE shift to state 32
-- On MOD shift to state 26
-- On MINUS shift to state 34
-- On LT shift to state 36
-- On LE shift to state 38
-- On GT shift to state 40
-- On GE shift to state 42
-- On EQ shift to state 44
-- On DO shift to state 106
-- On DIV shift to state 28
-- On AND shift to state 46

State 106:
exp -> WHILE exp DO . exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On WHILE shift to state 1
-- On STRING shift to state 2
-- On REAL shift to state 3
-- On LPAREN shift to state 4
-- On LOGIC shift to state 5
-- On LET shift to state 6
-- On INTEGER shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On BREAK shift to state 16
-- On var shift to state 17
-- On exp shift to state 107

State 107:
exp -> exp . PLUS exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . MINUS exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . TIMES exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . DIV exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . MOD exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . POW exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . EQ exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . NE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . GT exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . GE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . LT exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . LE exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . AND exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> exp . OR exp [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
exp -> WHILE exp DO exp . [ VAR TYPE TIMES THEN SEMI RPAREN POW PLUS OR NE MOD MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIV COMMA AND ]
-- On TIMES shift to state 20
-- On POW shift to state 22
-- On PLUS shift to state 24
-- On OR shift to state 30
-- On NE shift to state 32
-- On MOD shift to state 26
-- On MINUS shift to state 34
-- On LT shift to state 36
-- On LE shift to state 38
-- On GT shift to state 40
-- On GE shift to state 42
-- On EQ shift to state 44
-- On DIV shift to state 28
-- On AND shift to state 46
-- On VAR reduce production exp -> WHILE exp DO exp 
-- On TYPE reduce production exp -> WHILE exp DO exp 
-- On THEN reduce production exp -> WHILE exp DO exp 
-- On SEMI reduce production exp -> WHILE exp DO exp 
-- On RPAREN reduce production exp -> WHILE exp DO exp 
-- On IN reduce production exp -> WHILE exp DO exp 
-- On FUNCTION reduce production exp -> WHILE exp DO exp 
-- On EOF reduce production exp -> WHILE exp DO exp 
-- On END reduce production exp -> WHILE exp DO exp 
-- On ELSE reduce production exp -> WHILE exp DO exp 
-- On DO reduce production exp -> WHILE exp DO exp 
-- On COMMA reduce production exp -> WHILE exp DO exp 

State 108:
program' -> program . [ # ]
-- On # accept program

State 109:
exp -> exp . PLUS exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ EOF DIV AND ]
exp -> exp . MINUS exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ EOF DIV AND ]
exp -> exp . TIMES exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ EOF DIV AND ]
exp -> exp . DIV exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ EOF DIV AND ]
exp -> exp . MOD exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ EOF DIV AND ]
exp -> exp . POW exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ EOF DIV AND ]
exp -> exp . EQ exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ EOF DIV AND ]
exp -> exp . NE exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ EOF DIV AND ]
exp -> exp . GT exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ EOF DIV AND ]
exp -> exp . GE exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ EOF DIV AND ]
exp -> exp . LT exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ EOF DIV AND ]
exp -> exp . LE exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ EOF DIV AND ]
exp -> exp . AND exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ EOF DIV AND ]
exp -> exp . OR exp [ TIMES POW PLUS OR NE MOD MINUS LT LE GT GE EQ EOF DIV AND ]
program -> exp . EOF [ # ]
-- On TIMES shift to state 20
-- On POW shift to state 22
-- On PLUS shift to state 24
-- On OR shift to state 30
-- On NE shift to state 32
-- On MOD shift to state 26
-- On MINUS shift to state 34
-- On LT shift to state 36
-- On LE shift to state 38
-- On GT shift to state 40
-- On GE shift to state 42
-- On EQ shift to state 44
-- On EOF shift to state 110
-- On DIV shift to state 28
-- On AND shift to state 46

State 110:
program -> exp EOF . [ # ]
-- On # reduce production program -> exp EOF 

